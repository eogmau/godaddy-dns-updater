#!/bin/bash

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
readonly DOMAIN="${1}"
readonly SUBDOMAIN="${2}"
readonly API_KEY="${3}"
readonly DNS_CHECK="${4}"
readonly PUID="${5}"
readonly PGID="${6}"
if [[ -z "${7}" ]]; then
  echo "TZ variable not set, defaulting to UTC"
else
  cp /usr/share/zoneinfo/${7} /etc/localtime
fi

# Check if domain variable is set and exit if not
validate_domain(){
  if [[ "${DOMAIN}" == 'NULL' ]]; then
    echo "[$(date +%D" "%H:%M" "%Z)] DOMAIN not set, exiting container"|tee -a ${logdest}
    exit 1
  fi
}

# Check if api_key variable is set and exit if not
validate_api_key(){
  if [[ "${API_KEY}" == 'NULL' ]]; then
    echo "[$(date +%D" "%H:%M" "%Z)] API_KEY not set, exiting container"|tee -a ${logdest}
    exit 1
  else
    echo "[$(date +%D" "%H:%M" "%Z)] API_KEY set"|tee -a ${logdest}
  fi
}

validate_subdomain(){
  if [[ "${SUBDOMAIN}" == '*' ]]; then
    echo "[$(date +%D" "%H:%M" "%Z)] Error: SUBDOMAIN should be omitted for wildcard updates.  Point subdomains to '@' in godaddy DNS and update domain with this container"|tee -a ${logdest}
    sleep 30
    exit 1
  fi
}

# Set domain or subdomain to update
get_domain_to_update(){
  if [[ "${SUBDOMAIN}" == '@' ]]; then
    echo "${DOMAIN}"
  else
    echo "${SUBDOMAIN}.${DOMAIN}"
  fi
}

monitor_and_update_domain(){
  echo -e "[$(date +%D" "%H:%M" "%Z)] Monitoring records for ${domain_to_update}, checks every ${DNS_CHECK} seconds\nCurrent external IP is $(curl -s "https://api.ipify.org")"|tee -a ${logdest}
  while :; do
    domain_dns_ip=$(dig +short "${domain_to_update}")
    external_ip=$(curl -s https://api.ipify.org)
    if [[ "$?" != 0 ]]; then
      echo "Unable to get external ip address"
      exit 1
    fi
    if [[ "${domain_dns_ip}" != "${external_ip}" ]]; then
      domain_ip_raw="$(curl -s -X GET -H "Authorization: sso-key ${API_KEY}" "https://api.godaddy.com/v1/domains/${DOMAIN}/records/A/${SUBDOMAIN}")"
      domain_ip="$(echo "${domain_ip_raw}" | cut -d ',' -f 1 | tr -d '"' | cut -d ":" -f 2)"
      if [[ "${domain_ip}" != "${external_ip}" ]]; then
        update_status=$(curl -o /dev/null -w "%{http_code}\n" -s -X PUT "https://api.godaddy.com/v1/domains/${DOMAIN}/records/A/${SUBDOMAIN}" -H "Authorization: sso-key ${API_KEY}" -H "Content-Type: application/json" -d "[{\"data\": \"${external_ip}\"}]")
        if [[ ${update_status} -eq 200 ]]; then
          echo "[$(date +%D" "%H:%M" "%Z)] Changed IP on ${domain_to_update} from ${domain_ip} to ${external_ip}"|tee -a ${logdest}
        else
          echo "[$(date +%D" "%H:%M" "%Z)] GoDaddy API returned ${update_status} status,  update FAILED"|tee -a ${logdest}
        fi
      else
        echo "[$(date +%D" "%H:%M" "%Z)] External DNS for ${domain_to_update} resolves to ${external_ip}, no update needed"|tee -a ${logdest}
      fi
    else
      echo "[$(date +%D" "%H:%M" "%Z)] External DNS for ${domain_to_update} resolves to ${external_ip}, no update needed"|tee -a ${logdest}
    fi
    sleep "${DNS_CHECK}"
  done
}

main(){
  validate_domain
  validate_api_key
  validate_subdomain
  readonly domain_to_update="$(get_domain_to_update)"
  readonly logdest="/tmp/${domain_to_update}.log"
  touch "${logdest}" && chown ${PUID}:${PGID} "${logdest}"
  chmod a+r "${logdest}"
  monitor_and_update_domain
}

main
